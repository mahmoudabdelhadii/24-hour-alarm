0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 440 Hz square wave at pin P3.7 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'BOOT' pushbutton connected to P3.7 is pressed.
                  7   $LIST
0000              9   
0000             10   CLK           EQU 24000000 ; Microcontroller system crystal frequency in Hz
0000             11   TIMER0_RATE   EQU 2000*2    ; The tone we want out is A mayor.  Interrupt rate must be twice as fast.
0000             12   TIMER0_RELOAD EQU ((65536-(CLK/(TIMER0_RATE))))
0000             13   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             14   TIMER2_RELOAD EQU ((65536-(CLK/(TIMER2_RATE))))
0000             15   
0000             16   BOOT_BUTTON   equ P3.7
0000             17   SOUND_OUT     equ P2.1
0000             18   UPDOWN        equ P0.0
0000             19   
0000             20   ; Reset vector
0000             21   org 0x0000
0000 020186      22       ljmp main
0003             23   
0003             24   ; External interrupt 0 vector (not used in this code)
0003             25   org 0x0003
0003 32          26            reti
0004             27   
0004             28   ; Timer/Counter 0 overflow interrupt vector
000B             29   org 0x000B
000B 0200FE      30            ljmp Timer0_ISR
000E             31   
000E             32   ; External interrupt 1 vector (not used in this code)
0013             33   org 0x0013
0013 32          34            reti
0014             35   
0014             36   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             37   org 0x001B
001B 32          38            reti
001C             39   
001C             40   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             41   org 0x0023 
0023 32          42            reti
0024             43            
0024             44   ; Timer/Counter 2 overflow interrupt vector
002B             45   org 0x002B
002B 020127      46            ljmp Timer2_ISR
002E             47   
002E             48   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             49   dseg at 0x30
0030             50   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             51   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             52   hours_count: ds 1
0034             53   minutes_count: ds 1
0035             54   seconds_count: ds 1
0036             55   
0036             56   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0036             57   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             58   bseg
0000             59   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             60   
002E             61   cseg
002E             62   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E             63   LCD_RS equ P2.0
002E             64   LCD_RW equ P1.7
002E             65   LCD_E  equ P1.6
002E             66   LCD_D4 equ P1.1
002E             67   LCD_D5 equ P1.0
002E             68   LCD_D6 equ P0.7
002E             69   LCD_D7 equ P0.6
                 71   	$LIST
00DC             73   
00DC             74   ;                     1234567890123456    <- This helps determine the location of the counter
00DC 7878203A    75   Initial_Message:  db 'xx :xx :xx ', 0
     7878203A
     78782000
00E8             76   
00E8             77   ;-----------------------------------;
00E8             78   ; Routine to initialize the timer 0 ;
00E8             79   ;-----------------------------------;
00E8             80   Timer0_Init:
00E8 438E04      81            orl CKCON0, #00000100B ; Timer 0 uses the system clock
00EB E589        82            mov a, TMOD
00ED 54F0        83            anl a, #0xf0 ; Clear the bits for timer 0
00EF 4401        84            orl a, #0x01 ; Configure timer 0 as 16-timer
00F1 F589        85            mov TMOD, a
00F3 758CE8      86            mov TH0, #high(TIMER0_RELOAD)
00F6 758A90      87            mov TL0, #low(TIMER0_RELOAD)
00F9             88            ; Enable the timer and interrupts
00F9 D2A9        89       setb ET0  ; Enable timer 0 interrupt
00FB D28C        90       setb TR0  ; Start timer 0
00FD 22          91            ret
00FE             92   
00FE             93   ;---------------------------------;
00FE             94   ; ISR for timer 0.                ;
00FE             95   ;---------------------------------;
00FE             96   Timer0_ISR:
00FE             97            ;clr TF0  ; According to the data sheet this is done for us already.
00FE             98            ; Timer 0 can not autoreload so we need to reload it in the ISR:
00FE C28C        99            clr TR0
0100 758CE8     100            mov TH0, #high(TIMER0_RELOAD)
0103 758A90     101            mov TL0, #low(TIMER0_RELOAD)
0106 D28C       102            setb TR0
0108 B2A1       103            cpl SOUND_OUT ; Toggle the pin connected to the speaker
010A 32         104            reti
010B            105   
010B            106   ;---------------------------------;
010B            107   ; Routine to initialize timer 2   ;
010B            108   ;---------------------------------;
010B            109   Timer2_Init:
010B 438E10     110            orl CKCON0, #0b00010000 ; Timer 2 uses the system clock
010E 75C800     111            mov TMR2CN0, #0 ; Stop timer/counter.  Autoreload mode.
0111 75CFA2     112            mov TMR2H, #high(TIMER2_RELOAD)
0114 75CE40     113            mov TMR2L, #low(TIMER2_RELOAD)
0117            114            ; Set the reload value
0117 75CBA2     115            mov TMR2RLH, #high(TIMER2_RELOAD)
011A 75CA40     116            mov TMR2RLL, #low(TIMER2_RELOAD)
011D            117            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
011D E4         118            clr a
011E F530       119            mov Count1ms+0, a
0120 F531       120            mov Count1ms+1, a
0122            121            ; Enable the timer and interrupts
0122 D2AD       122       setb ET2  ; Enable timer 2 interrupt
0124 D2CA       123       setb TR2  ; Enable timer 2
0126 22         124            ret
0127            125   
0127            126   ;---------------------------------;
0127            127   ; ISR for timer 2                 ;
0127            128   ;---------------------------------;
0127            129   Timer2_ISR:
0127 C2CF       130            clr TF2H  ; Timer 2 doesn't clear TF2H automatically. Do it in ISR
0129            131            
0129            132            ; The two registers used in the ISR must be saved in the stack
0129 C0E0       133            push acc
012B C0D0       134            push psw
012D            135            
012D            136            ; Increment the 16-bit one mili second counter
012D 0530       137            inc Count1ms+0    ; Increment the low 8-bits first
012F E530       138            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0131 7002       139            jnz Inc_Done
0133 0531       140            inc Count1ms+1
0135            141   
0135            142   Inc_Done:
0135            143            ; Check if half second has passed
0135 E530       144            mov a, Count1ms+0
0137 B4F41E     145            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
013A E531       146            mov a, Count1ms+1
013C B40119     147            cjne a, #high(500), Timer2_ISR_done
013F            148            
013F            149            ; 500 milliseconds have passed.  Set a flag so the main program knows
013F D200       150            setb half_seconds_flag ; Let the main program know half second had passed
0141 B28C       151            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0143 D2A1       152            setb SOUND_OUT
0145            153            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0145 E4         154            clr a
0146 F530       155            mov Count1ms+0, a
0148 F531       156            mov Count1ms+1, a
014A            157            ; Increment the BCD counter
014A E532       158            mov a, BCD_counter
014C 308004     159            jnb UPDOWN, Timer2_ISR_decrement
014F 2401       160            add a, #0x01
0151 8002       161            sjmp Timer2_ISR_da
0153            162   Timer2_ISR_decrement:
0153 2499       163            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0155            164   Timer2_ISR_da:
0155 D4         165            da a ; Decimal adjust instruction.  Check datasheet for more details!
0156 F532       166            mov BCD_counter, a
0158            167            
0158            168   Timer2_ISR_done:
0158 D0D0       169            pop psw
015A D0E0       170            pop acc
015C 32         171            reti
015D            172   
015D            173   ;---------------------------------;
015D            174   ; Hardware initialization         ;
015D            175   ;---------------------------------;
015D            176   Initialize_All:
015D            177       ; DISABLE WDT: provide Watchdog disable keys
015D 7597DE     178            mov     WDTCN,#0xDE ; First key
0160 7597AD     179            mov     WDTCN,#0xAD ; Second key
0163            180   
0163            181       ; Enable crossbar and weak pull-ups
0163 75E100     182            mov     XBR0,#0x00
0166 75E200     183            mov     XBR1,#0x00
0169 75E340     184            mov     XBR2,#0x40
016C            185   
016C 75A602     186            mov     P2MDOUT,#0x02 ; make sound output pin (P2.1) push-pull
016F            187            
016F            188            ; Switch clock to 24 MHz
016F 75A900     189            mov     CLKSEL, #0x00 ; 
0172 75A900     190            mov     CLKSEL, #0x00 ; Second write to CLKSEL is required according to the user manual (page 77)
0175            191            
0175            192            ; Wait for 24 MHz clock to stabilze by checking bit DIVRDY in CLKSEL
0175            193   waitclockstable:
0175 E5A9       194            mov a, CLKSEL
0177 30E7FB     195            jnb acc.7, waitclockstable 
017A            196   
017A            197            ; Initialize the two timers used in this program
017A 1200E8     198       lcall Timer0_Init
017D 12010B     199       lcall Timer2_Init
0180            200   
0180 120088     201       lcall LCD_4BIT ; Initialize LCD
0183            202       
0183 D2AF       203       setb EA   ; Enable Global interrupts
0185            204   
0185 22         205            ret
0186            206   
0186            207   ;---------------------------------;
0186            208   ; Main program.                   ;
0186            209   ;---------------------------------;
0186            210   main:
0186            211            ; Setup the stack start to the begining of memory only accesible with pointers
0186 75817F     212       mov SP, #7FH
0189            213       
0189 12015D     214            lcall Initialize_All
018C            215            
018C            216       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
018C C0E0       217            push acc
018E 7401       217            mov a, #1
0190 14         217            dec a
0191 1200C1     217            lcall ?Set_Cursor_1 ; Select column and row
0194 D0E0       217            pop acc
0196 C083       218            push dph
0198 C082       218            push dpl
019A C0E0       218            push acc
019C 9000DC     218            mov dptr, #Initial_Message
019F 1200B4     218            lcall ?Send_Constant_String
01A2 D0E0       218            pop acc
01A4 D082       218            pop dpl
01A6 D083       218            pop dph
01A8 D200       219       setb half_seconds_flag
01AA 753200     220            mov BCD_counter, #0x00
01AD            221            
01AD            222            ; After initialization the program stays in this 'forever' loop
01AD            223   loop:
01AD 20B71C     224            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
01B0 C002       225            push AR2
01B2 7A32       225            mov R2, #50
01B4 120039     225            lcall ?Wait_Milli_Seconds
01B7 D002       225            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
01B9 20B710     226            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
01BC 30B7FD     227            jnb BOOT_BUTTON, $              ; Wait for button release.  The '$' means: jump to same instruction.
01BF            228            ; A valid press of the 'BOOT' button has been detected, reset the BCD counter.
01BF            229            ; But first stop timer 2 and reset the milli-seconds counter, to resync everything.
01BF C2CA       230            clr TR2                 ; Stop timer 2
01C1 E4         231            clr a
01C2 F530       232            mov Count1ms+0, a
01C4 F531       233            mov Count1ms+1, a
01C6            234            ; Now clear the BCD counter
01C6 F532       235            mov BCD_counter, a
01C8 D2CA       236            setb TR2                ; Start timer 2
01CA 8003       237            sjmp loop_b             ; Display the new value
01CC            238   loop_a:
01CC 3000DE     239            jnb half_seconds_flag, loop
01CF            240   loop_b:
01CF C200       241       clr half_seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
01D1 C0E0       242            push acc
01D3 7409       242            mov a, #9
01D5 14         242            dec a
01D6 1200C1     242            lcall ?Set_Cursor_1 ; Select column and row
01D9 D0E0       242            pop acc     ; the place in the LCD where we want the BCD counter value
01DB C000       243            push ar0
01DD A832       243            mov r0, BCD_counter
01DF 1200C6     243            lcall ?Display_BCD
01E2 D000       243            pop ar0 ; This macro is also in 'LCD_4bit.inc'
01E4 0201AD     244       ljmp loop
01E7            245   END
